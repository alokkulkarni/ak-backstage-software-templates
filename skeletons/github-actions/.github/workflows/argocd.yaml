name: Build, Push & Deploy to MicroK8s using ArgoCD

on:
  push:
    branches:
      - main

jobs:
  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'temurin'
  #         java-version: '17'

  #     - name: Build with Maven
  #       run: mvn clean package

  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.ORG_DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.ORG_DOCKERHUB_TOKEN }}

  #     - name: Extract Project Version
  #       id: project_version
  #       run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

  #     - name: Build and Push Docker Image
  #       run: |
  #         docker build -t ${{ secrets.ORG_DOCKERHUB_USERNAME }}/${{ values.repoName }}:${{ env.VERSION }} .
  #         docker tag ${{ secrets.ORG_DOCKERHUB_USERNAME }}/${{ values.repoName }}:${{ env.VERSION }} ${{ secrets.ORG_DOCKERHUB_USERNAME }}/${{ values.repoName }}:latest
  #         docker push ${{ secrets.ORG_DOCKERHUB_USERNAME }}/${{ values.repoName }}:${{ env.VERSION }}
  #         docker push ${{ secrets.ORG_DOCKERHUB_USERNAME }}/${{ values.repoName }}:latest

  deploy:
    runs-on: ubuntu-latest
    # needs: build
    steps:
      - name: Install ArgoCD CLI
        run: |
          curl -sSL https://github.com/argoproj/argo-cd/releases/download/v2.4.9/argocd-linux-amd64 -o /usr/local/bin/argocd
          chmod +x /usr/local/bin/argocd

      - name: Login to ArgoCD
        run: |
          argocd login localhost:8080 --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

      - name: Create ArgoCD Project (if not exists)
        run: |
          # Create ArgoCD project if not already present
          if ! argocd proj list | grep -q "${{ values.repoName }}"; then
            argocd proj create ${{ values.repoName }} --description "Spring Boot app project" --dest-namespace default --dest-server https://kubernetes.default.svc
          fi

      - name: Create ArgoCD Application
        run: |
          # Create ArgoCD application for Spring Boot if not exists
          if ! argocd app list | grep -q "${{ values.repoName }}"; then
            argocd app create springboot-app \
              --repo https://${{ values.sourceControl }}/${{ values.orgName }}/${{ values.repoName }}.git \
              --path manifests/base \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace default \
              --sync-policy automated \
              --project ${{ values.repoName }}
          fi

      - name: Sync ArgoCD Application
        run: |
          # Sync ArgoCD app to deploy the app to MicroK8s
          argocd app sync ${{ values.repoName }}

      - name: Verify Deployment in MicroK8s
        run: |
          kubectl get pods -n default

